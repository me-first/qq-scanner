{"id":"../../node_modules/gifwrap/src/gif.js","dependencies":[{"name":"C:\\Users\\MICRO WORLD\\Desktop\\Node-project\\qr-code\\package.json","includedInParent":true,"mtime":1604232931498},{"name":"C:\\Users\\MICRO WORLD\\Desktop\\Node-project\\qr-code\\node_modules\\gifwrap\\package.json","includedInParent":true,"mtime":1604203027975}],"generated":{"js":"'use strict';\n\n/** @class Gif */\n\nclass Gif {\n\n    // width - width of GIF in pixels\n    // height - height of GIF in pixels\n    // loops - 0 = unending; (n > 0) = iterate n times\n    // usesTransparency - whether any frames have transparent pixels\n    // colorScope - scope of color tables in GIF\n    // frames - array of frames\n    // buffer - GIF-formatted data\n\n    /**\n     * Gif is a class representing an encoded GIF. It is intended to be a read-only representation of a byte-encoded GIF. Only encoders and decoders should be creating instances of this class.\n     * \n     * Property | Description\n     * --- | ---\n     * width | width of the GIF at its widest\n     * height | height of the GIF at its highest\n     * loops | the number of times the GIF should loop before stopping; 0 => loop indefinately\n     * usesTransparency | boolean indicating whether at least one frame contains at least one transparent pixel\n     * colorScope | the scope of the color tables as encoded within the GIF; either Gif.GlobalColorsOnly (== 1) or Gif.LocalColorsOnly (== 2).\n     * frames | a array of GifFrame instances, one for each frame of the GIF\n     * buffer | a Buffer holding the encoding's byte data\n     * \n     * Its constructor should only ever be called by the GIF encoder or decoder.\n     *\n     * @param {Buffer} buffer A Buffer containing the encoded bytes\n     * @param {GifFrame[]} frames Array of frames found in the encoding\n     * @param {object} spec Properties of the encoding as listed above\n     */\n\n    constructor(buffer, frames, spec) {\n        this.width = spec.width;\n        this.height = spec.height;\n        this.loops = spec.loops;\n        this.usesTransparency = spec.usesTransparency;\n        this.colorScope = spec.colorScope;\n        this.frames = frames;\n        this.buffer = buffer;\n    }\n}\n\nGif.GlobalColorsPreferred = 0;\nGif.GlobalColorsOnly = 1;\nGif.LocalColorsOnly = 2;\n\n/** @class GifError */\n\nclass GifError extends Error {\n\n    /**\n     * GifError is a class representing a GIF-related error\n     * \n     * @param {string|Error} messageOrError\n     */\n\n    constructor(messageOrError) {\n        super(messageOrError);\n        if (messageOrError instanceof Error) {\n            this.stack = 'Gif' + messageOrError.stack;\n        }\n    }\n}\n\nexports.Gif = Gif;\nexports.GifError = GifError;\n"},"sourceMaps":{"js":{"mappings":[{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../../node_modules/gifwrap/src/gif.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}}],"sources":{"../../node_modules/gifwrap/src/gif.js":"'use strict';\n\n/** @class Gif */\n\nclass Gif {\n\n    // width - width of GIF in pixels\n    // height - height of GIF in pixels\n    // loops - 0 = unending; (n > 0) = iterate n times\n    // usesTransparency - whether any frames have transparent pixels\n    // colorScope - scope of color tables in GIF\n    // frames - array of frames\n    // buffer - GIF-formatted data\n\n    /**\n     * Gif is a class representing an encoded GIF. It is intended to be a read-only representation of a byte-encoded GIF. Only encoders and decoders should be creating instances of this class.\n     * \n     * Property | Description\n     * --- | ---\n     * width | width of the GIF at its widest\n     * height | height of the GIF at its highest\n     * loops | the number of times the GIF should loop before stopping; 0 => loop indefinately\n     * usesTransparency | boolean indicating whether at least one frame contains at least one transparent pixel\n     * colorScope | the scope of the color tables as encoded within the GIF; either Gif.GlobalColorsOnly (== 1) or Gif.LocalColorsOnly (== 2).\n     * frames | a array of GifFrame instances, one for each frame of the GIF\n     * buffer | a Buffer holding the encoding's byte data\n     * \n     * Its constructor should only ever be called by the GIF encoder or decoder.\n     *\n     * @param {Buffer} buffer A Buffer containing the encoded bytes\n     * @param {GifFrame[]} frames Array of frames found in the encoding\n     * @param {object} spec Properties of the encoding as listed above\n     */\n\n    constructor(buffer, frames, spec) {\n        this.width = spec.width;\n        this.height = spec.height;\n        this.loops = spec.loops;\n        this.usesTransparency = spec.usesTransparency;\n        this.colorScope = spec.colorScope;\n        this.frames = frames;\n        this.buffer = buffer;\n    }\n}\n\nGif.GlobalColorsPreferred = 0;\nGif.GlobalColorsOnly = 1;\nGif.LocalColorsOnly = 2;\n\n/** @class GifError */\n\nclass GifError extends Error {\n\n    /**\n     * GifError is a class representing a GIF-related error\n     * \n     * @param {string|Error} messageOrError\n     */\n\n    constructor(messageOrError) {\n        super(messageOrError);\n        if (messageOrError instanceof Error) {\n            this.stack = 'Gif' + messageOrError.stack;\n        }\n    }\n}\n\nexports.Gif = Gif;\nexports.GifError = GifError;\n"},"lineCount":70}},"error":null,"hash":"d660458c361fdb7e71940bd871c3ce7b","cacheData":{"env":{}}}