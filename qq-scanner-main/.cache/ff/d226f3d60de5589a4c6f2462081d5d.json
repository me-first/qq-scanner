{"id":"../../node_modules/any-base/src/converter.js","dependencies":[{"name":"C:\\Users\\MICRO WORLD\\Desktop\\Node-project\\qr-code\\package.json","includedInParent":true,"mtime":1604232931498},{"name":"C:\\Users\\MICRO WORLD\\Desktop\\Node-project\\qr-code\\node_modules\\any-base\\package.json","includedInParent":true,"mtime":1604203027972}],"generated":{"js":"'use strict';\n\n/**\n * Converter\n *\n * @param {string|Array} srcAlphabet\n * @param {string|Array} dstAlphabet\n * @constructor\n */\nfunction Converter(srcAlphabet, dstAlphabet) {\n    if (!srcAlphabet || !dstAlphabet || !srcAlphabet.length || !dstAlphabet.length) {\n        throw new Error('Bad alphabet');\n    }\n    this.srcAlphabet = srcAlphabet;\n    this.dstAlphabet = dstAlphabet;\n}\n\n/**\n * Convert number from source alphabet to destination alphabet\n *\n * @param {string|Array} number - number represented as a string or array of points\n *\n * @returns {string|Array}\n */\nConverter.prototype.convert = function(number) {\n    var i, divide, newlen,\n    numberMap = {},\n    fromBase = this.srcAlphabet.length,\n    toBase = this.dstAlphabet.length,\n    length = number.length,\n    result = typeof number === 'string' ? '' : [];\n\n    if (!this.isValid(number)) {\n        throw new Error('Number \"' + number + '\" contains of non-alphabetic digits (' + this.srcAlphabet + ')');\n    }\n\n    if (this.srcAlphabet === this.dstAlphabet) {\n        return number;\n    }\n\n    for (i = 0; i < length; i++) {\n        numberMap[i] = this.srcAlphabet.indexOf(number[i]);\n    }\n    do {\n        divide = 0;\n        newlen = 0;\n        for (i = 0; i < length; i++) {\n            divide = divide * fromBase + numberMap[i];\n            if (divide >= toBase) {\n                numberMap[newlen++] = parseInt(divide / toBase, 10);\n                divide = divide % toBase;\n            } else if (newlen > 0) {\n                numberMap[newlen++] = 0;\n            }\n        }\n        length = newlen;\n        result = this.dstAlphabet.slice(divide, divide + 1).concat(result);\n    } while (newlen !== 0);\n\n    return result;\n};\n\n/**\n * Valid number with source alphabet\n *\n * @param {number} number\n *\n * @returns {boolean}\n */\nConverter.prototype.isValid = function(number) {\n    var i = 0;\n    for (; i < number.length; ++i) {\n        if (this.srcAlphabet.indexOf(number[i]) === -1) {\n            return false;\n        }\n    }\n    return true;\n};\n\nmodule.exports = Converter;"},"sourceMaps":{"js":{"mappings":[{"source":"../../node_modules/any-base/src/converter.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../../node_modules/any-base/src/converter.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}}],"sources":{"../../node_modules/any-base/src/converter.js":"'use strict';\n\n/**\n * Converter\n *\n * @param {string|Array} srcAlphabet\n * @param {string|Array} dstAlphabet\n * @constructor\n */\nfunction Converter(srcAlphabet, dstAlphabet) {\n    if (!srcAlphabet || !dstAlphabet || !srcAlphabet.length || !dstAlphabet.length) {\n        throw new Error('Bad alphabet');\n    }\n    this.srcAlphabet = srcAlphabet;\n    this.dstAlphabet = dstAlphabet;\n}\n\n/**\n * Convert number from source alphabet to destination alphabet\n *\n * @param {string|Array} number - number represented as a string or array of points\n *\n * @returns {string|Array}\n */\nConverter.prototype.convert = function(number) {\n    var i, divide, newlen,\n    numberMap = {},\n    fromBase = this.srcAlphabet.length,\n    toBase = this.dstAlphabet.length,\n    length = number.length,\n    result = typeof number === 'string' ? '' : [];\n\n    if (!this.isValid(number)) {\n        throw new Error('Number \"' + number + '\" contains of non-alphabetic digits (' + this.srcAlphabet + ')');\n    }\n\n    if (this.srcAlphabet === this.dstAlphabet) {\n        return number;\n    }\n\n    for (i = 0; i < length; i++) {\n        numberMap[i] = this.srcAlphabet.indexOf(number[i]);\n    }\n    do {\n        divide = 0;\n        newlen = 0;\n        for (i = 0; i < length; i++) {\n            divide = divide * fromBase + numberMap[i];\n            if (divide >= toBase) {\n                numberMap[newlen++] = parseInt(divide / toBase, 10);\n                divide = divide % toBase;\n            } else if (newlen > 0) {\n                numberMap[newlen++] = 0;\n            }\n        }\n        length = newlen;\n        result = this.dstAlphabet.slice(divide, divide + 1).concat(result);\n    } while (newlen !== 0);\n\n    return result;\n};\n\n/**\n * Valid number with source alphabet\n *\n * @param {number} number\n *\n * @returns {boolean}\n */\nConverter.prototype.isValid = function(number) {\n    var i = 0;\n    for (; i < number.length; ++i) {\n        if (this.srcAlphabet.indexOf(number[i]) === -1) {\n            return false;\n        }\n    }\n    return true;\n};\n\nmodule.exports = Converter;"},"lineCount":80}},"error":null,"hash":"c5d7c0194abbbadf494e0ddf077c6129","cacheData":{"env":{}}}